// Code generated by bitproto. DO NOT EDIT.

#ifndef __BITPROTO__CANPACKETS_H__
#define __BITPROTO__CANPACKETS_H__ 1

#include <inttypes.h>
#include <stddef.h>
#include <stdint.h>
#ifndef __cplusplus
#include <stdbool.h>
#endif

#include "bitproto.h"

#if defined(__cplusplus)
extern "C" {
#endif

// The different types of nodes currently possible, will be exanded in the future.
typedef uint8_t NodeType; // 4bit

#define PRESSURE_TRANSDUCER_NODE 0
#define LOAD_CELL_NODE 1
#define THERMAL_COUPLE_NODE 2
#define SOLENOID_NODE 3

// Number of bytes to encode struct StagePacket
#define BYTES_LENGTH_STAGE_PACKET 8

// Must be repeated every 20ms, otherwise the solenoids will be closed. (Sent by the mainland.)
// ID: 0x01
struct StagePacket {
    bool solenoid_state[64]; // 64bit
};

// Number of bytes to encode struct PowerPacket
#define BYTES_LENGTH_POWER_PACKET 1

// Must be repeated every 20ms, otherwise the power will be cut to all solenoids. (Sent by the mainland.)
// ID: 0x00
struct PowerPacket {
    bool system_powered; // 1bit
    bool siren; // 1bit
};

// Number of bytes to encode struct BlinkPacket
#define BYTES_LENGTH_BLINK_PACKET 1

// Causes a Island node to blink it's USER LED for 5 seconds.
// ID: 0x06
struct BlinkPacket {
    uint8_t node_id; // 8bit
};

// Number of bytes to encode struct SensorDataPacket
#define BYTES_LENGTH_SENSOR_DATA_PACKET 5

// ID: 0x03
struct SensorDataPacket {
    uint8_t sensor_id; // 4bit
    uint32_t sensor_data; // 32bit
};

// Number of bytes to encode struct PongPacket
#define BYTES_LENGTH_PONG_PACKET 2

// Returned by all Island nodes, identifying their ID and their sensor type.
// ID: 0x05
struct PongPacket {
    uint8_t node_id; // 8bit
    NodeType node_type; // 4bit
};

// Encode struct StagePacket to given buffer s.
int EncodeStagePacket(struct StagePacket *m, unsigned char *s);
// Decode struct StagePacket from given buffer s.
int DecodeStagePacket(struct StagePacket *m, unsigned char *s);
// Format struct StagePacket to a json format string.
int JsonStagePacket(struct StagePacket *m, char *s);

// Encode struct PowerPacket to given buffer s.
int EncodePowerPacket(struct PowerPacket *m, unsigned char *s);
// Decode struct PowerPacket from given buffer s.
int DecodePowerPacket(struct PowerPacket *m, unsigned char *s);
// Format struct PowerPacket to a json format string.
int JsonPowerPacket(struct PowerPacket *m, char *s);

// Encode struct BlinkPacket to given buffer s.
int EncodeBlinkPacket(struct BlinkPacket *m, unsigned char *s);
// Decode struct BlinkPacket from given buffer s.
int DecodeBlinkPacket(struct BlinkPacket *m, unsigned char *s);
// Format struct BlinkPacket to a json format string.
int JsonBlinkPacket(struct BlinkPacket *m, char *s);

// Encode struct SensorDataPacket to given buffer s.
int EncodeSensorDataPacket(struct SensorDataPacket *m, unsigned char *s);
// Decode struct SensorDataPacket from given buffer s.
int DecodeSensorDataPacket(struct SensorDataPacket *m, unsigned char *s);
// Format struct SensorDataPacket to a json format string.
int JsonSensorDataPacket(struct SensorDataPacket *m, char *s);

// Encode struct PongPacket to given buffer s.
int EncodePongPacket(struct PongPacket *m, unsigned char *s);
// Decode struct PongPacket from given buffer s.
int DecodePongPacket(struct PongPacket *m, unsigned char *s);
// Format struct PongPacket to a json format string.
int JsonPongPacket(struct PongPacket *m, char *s);

void BpXXXProcessStagePacket(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatStagePacket(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessPowerPacket(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatPowerPacket(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessBlinkPacket(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatBlinkPacket(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessSensorDataPacket(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatSensorDataPacket(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessPongPacket(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatPongPacket(void *data, struct BpJsonFormatContext *ctx);

#if defined(__cplusplus)
}
#endif

#endif