// Code generated by bitproto. DO NOT EDIT.

#ifndef __BITPROTO__CANPACKETS_H__
#define __BITPROTO__CANPACKETS_H__ 1

#include <inttypes.h>
#include <stddef.h>
#include <stdint.h>
#ifndef __cplusplus
#include <stdbool.h>
#endif

#include "bitproto.h"

#if defined(__cplusplus)
extern "C" {
#endif

typedef uint8_t SensorType; // 4bit

#define PRESSURE_TRANSDUCER 0
#define LOAD_CELL 1
#define THERMAL_COUPLE 2

// The stages of the rocket firing.
typedef uint8_t Stage; // 4bit

#define METHANOL_PRESSURIZATION 0
#define AIR_PRESSURIZATION 1
#define FIRE_NO_IGNITION 2
#define FIRE_WITH_IGNITION 3
#define PURGE 4
#define CLOSE 5

// Whether a solenoid is open or closed.
typedef uint8_t SolenoidState; // 1bit

#define CLOSED 0
#define OPEN 1

typedef uint8_t ID; // 8bit

// Number of bytes to encode struct ChangeIDPacket
#define BYTES_LENGTH_CHANGE_ID_PACKET 2

// Changes the ID of one of the nodes. (Sent by the mainland.)
// ID: 0x04
struct ChangeIDPacket {
    ID previous_id; // 8bit
    ID new_id; // 8bit
};

// Number of bytes to encode struct SolenoidStatePacket
#define BYTES_LENGTH_SOLENOID_STATE_PACKET 2

// Must be repeated every 20ms, otherwise the solenoid will be closed. (Sent by the mainland.)
// Cannot be sent at the same time as a staging packet, although multiple of these can be sent in sequence.
// ID: 0x02
struct SolenoidStatePacket {
    ID id; // 8bit
    SolenoidState state; // 1bit
};

// Number of bytes to encode struct StagePacket
#define BYTES_LENGTH_STAGE_PACKET 1

// Must be repeated every 20ms, otherwise the solenoids will be closed and power will be cut. (Sent by the mainland.)
// ID: 0x00
struct StagePacket {
    bool system_ready; // 1bit
    Stage stage; // 4bit
};

// Number of bytes to encode struct SensorData
#define BYTES_LENGTH_SENSOR_DATA 6

// ID: 0x03
struct SensorData {
    ID node_id; // 8bit
    uint8_t sensor_id; // 4bit
    SensorType sensor_type; // 4bit
    uint32_t sensor_data; // 32bit
};

// Encode struct ChangeIDPacket to given buffer s.
int EncodeChangeIDPacket(struct ChangeIDPacket *m, unsigned char *s);
// Decode struct ChangeIDPacket from given buffer s.
int DecodeChangeIDPacket(struct ChangeIDPacket *m, unsigned char *s);
// Format struct ChangeIDPacket to a json format string.
int JsonChangeIDPacket(struct ChangeIDPacket *m, char *s);

// Encode struct SolenoidStatePacket to given buffer s.
int EncodeSolenoidStatePacket(struct SolenoidStatePacket *m, unsigned char *s);
// Decode struct SolenoidStatePacket from given buffer s.
int DecodeSolenoidStatePacket(struct SolenoidStatePacket *m, unsigned char *s);
// Format struct SolenoidStatePacket to a json format string.
int JsonSolenoidStatePacket(struct SolenoidStatePacket *m, char *s);

// Encode struct StagePacket to given buffer s.
int EncodeStagePacket(struct StagePacket *m, unsigned char *s);
// Decode struct StagePacket from given buffer s.
int DecodeStagePacket(struct StagePacket *m, unsigned char *s);
// Format struct StagePacket to a json format string.
int JsonStagePacket(struct StagePacket *m, char *s);

// Encode struct SensorData to given buffer s.
int EncodeSensorData(struct SensorData *m, unsigned char *s);
// Decode struct SensorData from given buffer s.
int DecodeSensorData(struct SensorData *m, unsigned char *s);
// Format struct SensorData to a json format string.
int JsonSensorData(struct SensorData *m, char *s);

void BpXXXProcessID(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatID(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessChangeIDPacket(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatChangeIDPacket(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessSolenoidStatePacket(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatSolenoidStatePacket(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessStagePacket(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatStagePacket(void *data, struct BpJsonFormatContext *ctx);

void BpXXXProcessSensorData(void *data, struct BpProcessorContext *ctx);
void BpXXXJsonFormatSensorData(void *data, struct BpJsonFormatContext *ctx);

#if defined(__cplusplus)
}
#endif

#endif